@page "/"
@page "/config-editor"
@using Microsoft.AspNetCore.Authorization
@using editConfigApp.Services
@inject IConfigurationEditorService ConfigurationService
@inject IJSRuntime JSRuntime
@inject IUserAccessService UserAccessService
@rendermode InteractiveServer
<h3>Configuration Editor</h3>


@if (_showNotification)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @_notificationMessage
        <button type="button" class="btn-close" @onclick="CloseNotification" aria-label="Close"></button>
    </div>
}
@if (_configuration == null)
{
    <p>Loading...</p>
}

else
{
    <AccessControl>
        <h2>Секретный контент</h2> <p>Это содержимое видно только авторизованным пользователям из списка.</p>
   



    <div class="mt-3">
        <button type="button" class="btn btn-primary me-2" @onclick="AddNewEntry">Add New Entry</button>
        <button type="button" class="btn btn-success" @onclick="SaveConfiguration">Save Configuration</button>
        <button type="button" class="btn btn-warning me-2" @onclick="LoadOriginalJson">Load Original JSON</button>
        <select class="form-select d-inline-block w-auto me-2" @onchange="UndoToSelected" disabled="@(_undoStack.Count <= 1)">
            <option disabled value="">Отменить</option>
            @for (int i = 1; i < _undoStack.Count; i++)
            {
                <option selected value="@i">Undo @i step@(i > 1 ? "s" : "")</option>
            }
        </select>
        @* <form action="" method="post" @formname="main" @onsubmit="HandleValidSubmit">
            <div class="input-group mb-3">
                <input type="text" class="form-control"
                       name="name" placeholder="Say your name...">
                <button class="btn btn-outline-secondary"
                        type="submit">
                    Say Hello
                </button>
            </div>
            <AntiforgeryToken />
        </form> *@
    </div>
    <div class="config-editor">      
        <div class="mb-3">
            <CascadingValue Value="this">
                @foreach (var entry in _configuration)
                {
                    var localEntry = entry;
                    <ConfigurationEntryEditor 
                        Depth="0" 
                        Entry="entry"
                        OnEntryChanged="@((e) => UpdateEntry(entry, e))"
                        OnDelete="@(() => DeleteEntry(entry))" />
                }
            </CascadingValue>
        </div>


    </div>
    </AccessControl>
}

@code {
    private string _notificationMessage = "";
    private MyModel model = new();
    private bool _showNotification = false;
    private System.Threading.Timer _notificationTimer;
    [Parameter]
    public List<ConfigurationEntry> _configuration { get; set; }
    //private Stack<List<ConfigurationEntry>> _undoStack = new Stack<List<ConfigurationEntry>>();
    [Parameter]
    public List<List<ConfigurationEntry>> _undoStack { get; set; } = new List<List<ConfigurationEntry>>();
    private const int MaxUndoSteps = 10;

    private void HandleValidSubmit()
    {
        Console.WriteLine($"Форма отправлена с именем: {model.Name}");
    }
    private void UpdateEntry(ConfigurationEntry oldEntry, ConfigurationEntry newEntry)
    {
        // Обновите _configuration с новыми данными
        var index = _configuration.IndexOf(oldEntry);
        if (index != -1)
        {
            _configuration[index] = newEntry;
            SaveState();
        }
        StateHasChanged();
    }
    private async Task LoadOriginalJson()
    {
        await LoadConfiguration();
        ShowNotification("Original JSON loaded successfully!");
    }

    public class MyModel
    {
        public string Name { get; set; }
    }



    protected override async Task OnInitializedAsync()
    {
        _configuration = await ConfigurationService.LoadConfigurationAsync();
        SaveState();
    }
    private void WriteToConsole()
    {
        Console.WriteLine("Кнопка нажата!");
    }
    private void HandleSubmit()
    {
        Console.WriteLine("Форма отправлена!");
    }

    private void DeleteEntry(ConfigurationEntry entry)
    {
        _configuration.Remove(entry); SaveState();
        StateHasChanged();
    }

    private void AddNewEntry()
    {
        _configuration.Add(new ConfigurationEntry
            {
                Key = "NewKey",
                Value = "NewValue"
            });
        SaveState();
        StateHasChanged();
    }
    private void UndoToSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int steps) && steps > 0 && steps < _undoStack.Count)
        {
            var _configurationLocal = JsonSerializer.Deserialize<List<ConfigurationEntry>>(JsonSerializer.Serialize(_undoStack[_undoStack.Count - steps - 1]));
            // var selecta =_configurationLocal.Select(x => new ConfigurationEntry()
            // {
            //  Key =x.Key,
            //         Value = !x.IsObject ? x.Value.ToString() : JsonSerializer.Deserialize<List<ConfigurationEntry>>(x.Value),
            //  // IsObject = x.IsObject,
            //  // IsArray = x.IsArray,
            //  IsExpanded=x.IsExpanded,
            //  Children=x.Children
            // }).ToList();

            
           // _configuration = selecta;
            _configuration = _configurationLocal;
            _undoStack.RemoveRange(_undoStack.Count - steps, steps);
            ShowNotification($"Undone {steps} step{(steps > 1 ? "s" : "")}!");
            StateHasChanged();
        }
    }
    private void SaveState()
    {
        //var serializedConfig = JsonSerializer.Serialize(_configuration);
        //var configCopy = JsonSerializer.Deserialize<List<ConfigurationEntry>>(serializedConfig);
        _undoStack.Add(_configuration);
        if (_undoStack.Count > MaxUndoSteps)
        {
            _undoStack.RemoveAt(0);
        }
    }
    private async Task SaveConfiguration()
    {
        await ConfigurationService.SaveConfigurationAsync(_configuration);
        ShowNotification("Configuration saved successfully!");
    }
    private bool CanUndo => _undoStack.Count > 1;


    private async Task LoadConfiguration()
    {
        _configuration = await ConfigurationService.LoadConfigurationAsync();
        SaveState();
    }
    private void ShowNotification(string message)
    {
        _notificationMessage = message;
        _showNotification = true;
        StateHasChanged();
        _notificationTimer?.Dispose();
        _notificationTimer = new System.Threading.Timer(_ =>
        {
            InvokeAsync(() =>
            {
                _showNotification = false;
                StateHasChanged();
            });
        }, null, 8000, System.Threading.Timeout.Infinite);
    }

    private void CloseNotification()
    {
        _showNotification = false;
        _notificationTimer?.Dispose();
    }
    public void Dispose()
    {
        _notificationTimer?.Dispose();
    }
}